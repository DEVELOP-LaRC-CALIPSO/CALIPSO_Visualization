Overview of version checking system inside VOCAL:
-------------------------------------------------

This branch has a special versioning system that will allow any future
users to seamlessly upgrade to newer versions of VOCAL without worrying about
runtime files. Without this versioning system, if a new version of VOCAL came with
modified runtime files, the program wouldn't know to replace the existing runtime
files during the upgrade. The runtime previously only checked for the existance of
a vocal folder in %appdata%, so if it existed nothing new would be copied over.

Now, we keep track of the interval version in two ways
    - a hard coded constant that is exported with the program, constants.VERSION
    - a file named VERSION.txt place within the `db` folder of the program.

When the program first starts up, the application looks to see if a 'vocal' folder
exists inside %APPDATA%, if not then it simply copies new data over. If it does exist
however, a couple new steps are taken.
    - the program opens the VERSION.txt file within the runtime files `db` folder to
      obtain the version of the program which originally copied those files over
    - if constants.VERSION does not match up with the version found in the runtime files,
      a special flag is set, constants.MISMATCHED_VERSION
    - inside calipso.py, if constants.MISMATCHED_VERSION is set to True, the program will
      prompt the user to make a decision whether to 1) replcae all files 2) replace all but
      database file 3) ignore
    - the users decision is written to a file in the runtime folder called TRIGGERS.txt and
      the program then closes. When the program reopens, runtime parses TRIGGERS.txt and will
      perform the action chosen by the user. This way the user may elect to replace all files and
      upgrade their runtime file version to the newest VOCAL


Generating releases for VOCAL with cx_freeze:
---------------------------------------------

  Create exe
  -------------
  * as with #102 , remove the docs folder so it is no longer within the repository
  * cd into vocal/calipso
  * python setup.py build_exe

  Configure
  -----------
  * copy all numpy libs into folder of generated executable. These include
    - libifcoremd.dll
    - libifportmd.dll
    - libiomp5md.dll
    - libiompstubs5md.dll
    - libmmd.dll
    - If some of these already exist, no need to copy/overwrite
    - They are commonly found in your anaconda Lib/site-packages/numpy/core/lib? I think
  * cd to location of executable, modify tcl/init.tcl & tk/tk.tcl
    - change 'package require -exact Tcl 8.5.15' to 'package require -exact Tcl 8.5.18'
    - If you aren't using 8.5.18, change to whatever version you have

  Copy files to be packed
  --------------------------
  * copy vocal/dat to build/dat
  * copy vocal/db to build/db
  * copy vocal/calipso/ico to build/ico
  * copy vocal/calipso/dat to build/dat_      *note the name change to 'dat_'
  * copy vocal/calipso/log to build/log
  * copy README.txt to build

  Creating vocal_setup.exe
  ------------------
  * rename folder exe.win32-2.7 (within build) to core
  * rename folder build to vocal
  * open vocal.iss in Inno Setup 5
  * change the lines of code labeled to the location of your ready-to-pack vocal folder
  * build -> compile
  * run installer!
